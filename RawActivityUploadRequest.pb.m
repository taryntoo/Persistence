// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "RawActivityUploadRequest.pb.h"
// @@protoc_insertion_point(imports)

@implementation RawActivityUploadRequestRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [RawActivityUploadRequestRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface RawActivityUploadRequest ()
@property (strong) NSMutableArray * rawActivityArray;
@end

@implementation RawActivityUploadRequest

@synthesize rawActivityArray;
@dynamic rawActivity;
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static RawActivityUploadRequest* defaultRawActivityUploadRequestInstance = nil;
+ (void) initialize {
  if (self == [RawActivityUploadRequest class]) {
    defaultRawActivityUploadRequestInstance = [[RawActivityUploadRequest alloc] init];
  }
}
+ (RawActivityUploadRequest*) defaultInstance {
  return defaultRawActivityUploadRequestInstance;
}
- (RawActivityUploadRequest*) defaultInstance {
  return defaultRawActivityUploadRequestInstance;
}
- (NSArray *)rawActivity {
  return rawActivityArray;
}
- (RawActivity*)rawActivityAtIndex:(NSUInteger)index {
  return [rawActivityArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitrawActivity = YES;
   [self.rawActivity enumerateObjectsUsingBlock:^(RawActivity *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitrawActivity = NO;
      *stop = YES;
    }
  }];
  if (!isInitrawActivity) return isInitrawActivity;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.rawActivityArray enumerateObjectsUsingBlock:^(RawActivity *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.rawActivityArray enumerateObjectsUsingBlock:^(RawActivity *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RawActivityUploadRequest*) parseFromData:(NSData*) data {
  return (RawActivityUploadRequest*)[[[RawActivityUploadRequest builder] mergeFromData:data] build];
}
+ (RawActivityUploadRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RawActivityUploadRequest*)[[[RawActivityUploadRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RawActivityUploadRequest*) parseFromInputStream:(NSInputStream*) input {
  return (RawActivityUploadRequest*)[[[RawActivityUploadRequest builder] mergeFromInputStream:input] build];
}
+ (RawActivityUploadRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RawActivityUploadRequest*)[[[RawActivityUploadRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RawActivityUploadRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RawActivityUploadRequest*)[[[RawActivityUploadRequest builder] mergeFromCodedInputStream:input] build];
}
+ (RawActivityUploadRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RawActivityUploadRequest*)[[[RawActivityUploadRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RawActivityUploadRequestBuilder*) builder {
  return [[RawActivityUploadRequestBuilder alloc] init];
}
+ (RawActivityUploadRequestBuilder*) builderWithPrototype:(RawActivityUploadRequest*) prototype {
  return [[RawActivityUploadRequest builder] mergeFrom:prototype];
}
- (RawActivityUploadRequestBuilder*) builder {
  return [RawActivityUploadRequest builder];
}
- (RawActivityUploadRequestBuilder*) toBuilder {
  return [RawActivityUploadRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.rawActivityArray enumerateObjectsUsingBlock:^(RawActivity *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"rawActivity"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RawActivityUploadRequest class]]) {
    return NO;
  }
  RawActivityUploadRequest *otherMessage = other;
  return
      [self.rawActivityArray isEqualToArray:otherMessage.rawActivityArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.rawActivityArray enumerateObjectsUsingBlock:^(RawActivity *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RawActivityUploadRequestBuilder()
@property (strong) RawActivityUploadRequest* result;
@end

@implementation RawActivityUploadRequestBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[RawActivityUploadRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (RawActivityUploadRequestBuilder*) clear {
  self.result = [[RawActivityUploadRequest alloc] init];
  return self;
}
- (RawActivityUploadRequestBuilder*) clone {
  return [RawActivityUploadRequest builderWithPrototype:result];
}
- (RawActivityUploadRequest*) defaultInstance {
  return [RawActivityUploadRequest defaultInstance];
}
- (RawActivityUploadRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RawActivityUploadRequest*) buildPartial {
  RawActivityUploadRequest* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (RawActivityUploadRequestBuilder*) mergeFrom:(RawActivityUploadRequest*) other {
  if (other == [RawActivityUploadRequest defaultInstance]) {
    return self;
  }
  if (other.rawActivityArray.count > 0) {
    if (result.rawActivityArray == nil) {
      result.rawActivityArray = [[NSMutableArray alloc] initWithArray:other.rawActivityArray];
    } else {
      [result.rawActivityArray addObjectsFromArray:other.rawActivityArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RawActivityUploadRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RawActivityUploadRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        RawActivityBuilder* subBuilder = [RawActivity builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRawActivity:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)rawActivity {
  return result.rawActivityArray;
}
- (RawActivity*)rawActivityAtIndex:(NSUInteger)index {
  return [result rawActivityAtIndex:index];
}
- (RawActivityUploadRequestBuilder *)addRawActivity:(RawActivity*)value {
  if (result.rawActivityArray == nil) {
    result.rawActivityArray = [[NSMutableArray alloc]init];
  }
  [result.rawActivityArray addObject:value];
  return self;
}
- (RawActivityUploadRequestBuilder *)setRawActivityArray:(NSArray *)array {
  result.rawActivityArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (RawActivityUploadRequestBuilder *)clearRawActivity {
  result.rawActivityArray = nil;
  return self;
}
@end

@interface RawActivity ()
@property SInt32 time;
@property SInt32 type;
@property SInt32 intensity;
@property Float32 score;
@property Float32 calories;
@property Float32 strides;
@property BOOL charging;
@property BOOL nonUse;
@property Float32 distance;
@end

@implementation RawActivity

- (BOOL) hasTime {
  return !!hasTime_;
}
- (void) setHasTime:(BOOL) value_ {
  hasTime_ = !!value_;
}
@synthesize time;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value_ {
  hasType_ = !!value_;
}
@synthesize type;
- (BOOL) hasIntensity {
  return !!hasIntensity_;
}
- (void) setHasIntensity:(BOOL) value_ {
  hasIntensity_ = !!value_;
}
@synthesize intensity;
- (BOOL) hasScore {
  return !!hasScore_;
}
- (void) setHasScore:(BOOL) value_ {
  hasScore_ = !!value_;
}
@synthesize score;
- (BOOL) hasCalories {
  return !!hasCalories_;
}
- (void) setHasCalories:(BOOL) value_ {
  hasCalories_ = !!value_;
}
@synthesize calories;
- (BOOL) hasStrides {
  return !!hasStrides_;
}
- (void) setHasStrides:(BOOL) value_ {
  hasStrides_ = !!value_;
}
@synthesize strides;
- (BOOL) hasCharging {
  return !!hasCharging_;
}
- (void) setHasCharging:(BOOL) value_ {
  hasCharging_ = !!value_;
}
- (BOOL) charging {
  return !!charging_;
}
- (void) setCharging:(BOOL) value_ {
  charging_ = !!value_;
}
- (BOOL) hasNonUse {
  return !!hasNonUse_;
}
- (void) setHasNonUse:(BOOL) value_ {
  hasNonUse_ = !!value_;
}
- (BOOL) nonUse {
  return !!nonUse_;
}
- (void) setNonUse:(BOOL) value_ {
  nonUse_ = !!value_;
}
- (BOOL) hasDistance {
  return !!hasDistance_;
}
- (void) setHasDistance:(BOOL) value_ {
  hasDistance_ = !!value_;
}
@synthesize distance;
- (id) init {
  if ((self = [super init])) {
    self.time = 0;
    self.type = 0;
    self.intensity = 0;
    self.score = 0;
    self.calories = 0;
    self.strides = 0;
    self.charging = NO;
    self.nonUse = NO;
    self.distance = 0;
  }
  return self;
}
static RawActivity* defaultRawActivityInstance = nil;
+ (void) initialize {
  if (self == [RawActivity class]) {
    defaultRawActivityInstance = [[RawActivity alloc] init];
  }
}
+ (RawActivity*) defaultInstance {
  return defaultRawActivityInstance;
}
- (RawActivity*) defaultInstance {
  return defaultRawActivityInstance;
}
- (BOOL) isInitialized {
  if (!self.hasTime) {
    return NO;
  }
  if (!self.hasType) {
    return NO;
  }
  if (!self.hasIntensity) {
    return NO;
  }
  if (!self.hasScore) {
    return NO;
  }
  if (!self.hasCalories) {
    return NO;
  }
  if (!self.hasStrides) {
    return NO;
  }
  if (!self.hasCharging) {
    return NO;
  }
  if (!self.hasNonUse) {
    return NO;
  }
  if (!self.hasDistance) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTime) {
    [output writeInt32:1 value:self.time];
  }
  if (self.hasType) {
    [output writeInt32:2 value:self.type];
  }
  if (self.hasIntensity) {
    [output writeInt32:3 value:self.intensity];
  }
  if (self.hasScore) {
    [output writeFloat:4 value:self.score];
  }
  if (self.hasCalories) {
    [output writeFloat:5 value:self.calories];
  }
  if (self.hasStrides) {
    [output writeFloat:6 value:self.strides];
  }
  if (self.hasCharging) {
    [output writeBool:7 value:self.charging];
  }
  if (self.hasNonUse) {
    [output writeBool:8 value:self.nonUse];
  }
  if (self.hasDistance) {
    [output writeFloat:9 value:self.distance];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTime) {
    size_ += computeInt32Size(1, self.time);
  }
  if (self.hasType) {
    size_ += computeInt32Size(2, self.type);
  }
  if (self.hasIntensity) {
    size_ += computeInt32Size(3, self.intensity);
  }
  if (self.hasScore) {
    size_ += computeFloatSize(4, self.score);
  }
  if (self.hasCalories) {
    size_ += computeFloatSize(5, self.calories);
  }
  if (self.hasStrides) {
    size_ += computeFloatSize(6, self.strides);
  }
  if (self.hasCharging) {
    size_ += computeBoolSize(7, self.charging);
  }
  if (self.hasNonUse) {
    size_ += computeBoolSize(8, self.nonUse);
  }
  if (self.hasDistance) {
    size_ += computeFloatSize(9, self.distance);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RawActivity*) parseFromData:(NSData*) data {
  return (RawActivity*)[[[RawActivity builder] mergeFromData:data] build];
}
+ (RawActivity*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RawActivity*)[[[RawActivity builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RawActivity*) parseFromInputStream:(NSInputStream*) input {
  return (RawActivity*)[[[RawActivity builder] mergeFromInputStream:input] build];
}
+ (RawActivity*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RawActivity*)[[[RawActivity builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RawActivity*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RawActivity*)[[[RawActivity builder] mergeFromCodedInputStream:input] build];
}
+ (RawActivity*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RawActivity*)[[[RawActivity builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RawActivityBuilder*) builder {
  return [[RawActivityBuilder alloc] init];
}
+ (RawActivityBuilder*) builderWithPrototype:(RawActivity*) prototype {
  return [[RawActivity builder] mergeFrom:prototype];
}
- (RawActivityBuilder*) builder {
  return [RawActivity builder];
}
- (RawActivityBuilder*) toBuilder {
  return [RawActivity builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"time", [NSNumber numberWithInteger:self.time]];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasIntensity) {
    [output appendFormat:@"%@%@: %@\n", indent, @"intensity", [NSNumber numberWithInteger:self.intensity]];
  }
  if (self.hasScore) {
    [output appendFormat:@"%@%@: %@\n", indent, @"score", [NSNumber numberWithFloat:self.score]];
  }
  if (self.hasCalories) {
    [output appendFormat:@"%@%@: %@\n", indent, @"calories", [NSNumber numberWithFloat:self.calories]];
  }
  if (self.hasStrides) {
    [output appendFormat:@"%@%@: %@\n", indent, @"strides", [NSNumber numberWithFloat:self.strides]];
  }
  if (self.hasCharging) {
    [output appendFormat:@"%@%@: %@\n", indent, @"charging", [NSNumber numberWithBool:self.charging]];
  }
  if (self.hasNonUse) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nonUse", [NSNumber numberWithBool:self.nonUse]];
  }
  if (self.hasDistance) {
    [output appendFormat:@"%@%@: %@\n", indent, @"distance", [NSNumber numberWithFloat:self.distance]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RawActivity class]]) {
    return NO;
  }
  RawActivity *otherMessage = other;
  return
      self.hasTime == otherMessage.hasTime &&
      (!self.hasTime || self.time == otherMessage.time) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasIntensity == otherMessage.hasIntensity &&
      (!self.hasIntensity || self.intensity == otherMessage.intensity) &&
      self.hasScore == otherMessage.hasScore &&
      (!self.hasScore || self.score == otherMessage.score) &&
      self.hasCalories == otherMessage.hasCalories &&
      (!self.hasCalories || self.calories == otherMessage.calories) &&
      self.hasStrides == otherMessage.hasStrides &&
      (!self.hasStrides || self.strides == otherMessage.strides) &&
      self.hasCharging == otherMessage.hasCharging &&
      (!self.hasCharging || self.charging == otherMessage.charging) &&
      self.hasNonUse == otherMessage.hasNonUse &&
      (!self.hasNonUse || self.nonUse == otherMessage.nonUse) &&
      self.hasDistance == otherMessage.hasDistance &&
      (!self.hasDistance || self.distance == otherMessage.distance) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.time] hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.type] hash];
  }
  if (self.hasIntensity) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.intensity] hash];
  }
  if (self.hasScore) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.score] hash];
  }
  if (self.hasCalories) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.calories] hash];
  }
  if (self.hasStrides) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.strides] hash];
  }
  if (self.hasCharging) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.charging] hash];
  }
  if (self.hasNonUse) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.nonUse] hash];
  }
  if (self.hasDistance) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.distance] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RawActivityBuilder()
@property (strong) RawActivity* result;
@end

@implementation RawActivityBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[RawActivity alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (RawActivityBuilder*) clear {
  self.result = [[RawActivity alloc] init];
  return self;
}
- (RawActivityBuilder*) clone {
  return [RawActivity builderWithPrototype:result];
}
- (RawActivity*) defaultInstance {
  return [RawActivity defaultInstance];
}
- (RawActivity*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RawActivity*) buildPartial {
  RawActivity* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (RawActivityBuilder*) mergeFrom:(RawActivity*) other {
  if (other == [RawActivity defaultInstance]) {
    return self;
  }
  if (other.hasTime) {
    [self setTime:other.time];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasIntensity) {
    [self setIntensity:other.intensity];
  }
  if (other.hasScore) {
    [self setScore:other.score];
  }
  if (other.hasCalories) {
    [self setCalories:other.calories];
  }
  if (other.hasStrides) {
    [self setStrides:other.strides];
  }
  if (other.hasCharging) {
    [self setCharging:other.charging];
  }
  if (other.hasNonUse) {
    [self setNonUse:other.nonUse];
  }
  if (other.hasDistance) {
    [self setDistance:other.distance];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RawActivityBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RawActivityBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTime:[input readInt32]];
        break;
      }
      case 16: {
        [self setType:[input readInt32]];
        break;
      }
      case 24: {
        [self setIntensity:[input readInt32]];
        break;
      }
      case 37: {
        [self setScore:[input readFloat]];
        break;
      }
      case 45: {
        [self setCalories:[input readFloat]];
        break;
      }
      case 53: {
        [self setStrides:[input readFloat]];
        break;
      }
      case 56: {
        [self setCharging:[input readBool]];
        break;
      }
      case 64: {
        [self setNonUse:[input readBool]];
        break;
      }
      case 77: {
        [self setDistance:[input readFloat]];
        break;
      }
    }
  }
}
- (BOOL) hasTime {
  return result.hasTime;
}
- (SInt32) time {
  return result.time;
}
- (RawActivityBuilder*) setTime:(SInt32) value {
  result.hasTime = YES;
  result.time = value;
  return self;
}
- (RawActivityBuilder*) clearTime {
  result.hasTime = NO;
  result.time = 0;
  return self;
}
- (BOOL) hasType {
  return result.hasType;
}
- (SInt32) type {
  return result.type;
}
- (RawActivityBuilder*) setType:(SInt32) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (RawActivityBuilder*) clearType {
  result.hasType = NO;
  result.type = 0;
  return self;
}
- (BOOL) hasIntensity {
  return result.hasIntensity;
}
- (SInt32) intensity {
  return result.intensity;
}
- (RawActivityBuilder*) setIntensity:(SInt32) value {
  result.hasIntensity = YES;
  result.intensity = value;
  return self;
}
- (RawActivityBuilder*) clearIntensity {
  result.hasIntensity = NO;
  result.intensity = 0;
  return self;
}
- (BOOL) hasScore {
  return result.hasScore;
}
- (Float32) score {
  return result.score;
}
- (RawActivityBuilder*) setScore:(Float32) value {
  result.hasScore = YES;
  result.score = value;
  return self;
}
- (RawActivityBuilder*) clearScore {
  result.hasScore = NO;
  result.score = 0;
  return self;
}
- (BOOL) hasCalories {
  return result.hasCalories;
}
- (Float32) calories {
  return result.calories;
}
- (RawActivityBuilder*) setCalories:(Float32) value {
  result.hasCalories = YES;
  result.calories = value;
  return self;
}
- (RawActivityBuilder*) clearCalories {
  result.hasCalories = NO;
  result.calories = 0;
  return self;
}
- (BOOL) hasStrides {
  return result.hasStrides;
}
- (Float32) strides {
  return result.strides;
}
- (RawActivityBuilder*) setStrides:(Float32) value {
  result.hasStrides = YES;
  result.strides = value;
  return self;
}
- (RawActivityBuilder*) clearStrides {
  result.hasStrides = NO;
  result.strides = 0;
  return self;
}
- (BOOL) hasCharging {
  return result.hasCharging;
}
- (BOOL) charging {
  return result.charging;
}
- (RawActivityBuilder*) setCharging:(BOOL) value {
  result.hasCharging = YES;
  result.charging = value;
  return self;
}
- (RawActivityBuilder*) clearCharging {
  result.hasCharging = NO;
  result.charging = NO;
  return self;
}
- (BOOL) hasNonUse {
  return result.hasNonUse;
}
- (BOOL) nonUse {
  return result.nonUse;
}
- (RawActivityBuilder*) setNonUse:(BOOL) value {
  result.hasNonUse = YES;
  result.nonUse = value;
  return self;
}
- (RawActivityBuilder*) clearNonUse {
  result.hasNonUse = NO;
  result.nonUse = NO;
  return self;
}
- (BOOL) hasDistance {
  return result.hasDistance;
}
- (Float32) distance {
  return result.distance;
}
- (RawActivityBuilder*) setDistance:(Float32) value {
  result.hasDistance = YES;
  result.distance = value;
  return self;
}
- (RawActivityBuilder*) clearDistance {
  result.hasDistance = NO;
  result.distance = 0;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
